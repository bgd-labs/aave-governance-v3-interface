/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace StateProofVerifier {
  export type SlotValueStruct = {
    exists: PromiseOrValue<boolean>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type SlotValueStructOutput = [boolean, BigNumber] & {
    exists: boolean;
    value: BigNumber;
  };
}

export interface IDataWarehouseInterface extends utils.Interface {
  functions: {
    "getRegisteredSlot(bytes32,address,bytes32)": FunctionFragment;
    "getStorage(address,bytes32,bytes32,bytes)": FunctionFragment;
    "getStorageRoots(address,bytes32)": FunctionFragment;
    "processStorageRoot(address,bytes32,bytes,bytes)": FunctionFragment;
    "processStorageSlot(address,bytes32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getRegisteredSlot"
      | "getStorage"
      | "getStorageRoots"
      | "processStorageRoot"
      | "processStorageSlot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRegisteredSlot",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageRoots",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processStorageRoot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processStorageSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRegisteredSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStorage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStorageRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processStorageRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processStorageSlot",
    data: BytesLike
  ): Result;

  events: {
    "StorageRootProcessed(address,address,bytes32)": EventFragment;
    "StorageSlotProcessed(address,address,bytes32,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StorageRootProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StorageSlotProcessed"): EventFragment;
}

export interface StorageRootProcessedEventObject {
  caller: string;
  account: string;
  blockHash: string;
}
export type StorageRootProcessedEvent = TypedEvent<
  [string, string, string],
  StorageRootProcessedEventObject
>;

export type StorageRootProcessedEventFilter =
  TypedEventFilter<StorageRootProcessedEvent>;

export interface StorageSlotProcessedEventObject {
  caller: string;
  account: string;
  blockHash: string;
  slot: string;
  value: BigNumber;
}
export type StorageSlotProcessedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  StorageSlotProcessedEventObject
>;

export type StorageSlotProcessedEventFilter =
  TypedEventFilter<StorageSlotProcessedEvent>;

export interface IDataWarehouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDataWarehouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRegisteredSlot(
      blockHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStorage(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[StateProofVerifier.SlotValueStructOutput]>;

    getStorageRoots(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    processStorageRoot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      blockHeaderRLP: PromiseOrValue<BytesLike>,
      accountStateProofRLP: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processStorageSlot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getRegisteredSlot(
    blockHash: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    slot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStorage(
    account: PromiseOrValue<string>,
    blockHash: PromiseOrValue<BytesLike>,
    slot: PromiseOrValue<BytesLike>,
    storageProof: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<StateProofVerifier.SlotValueStructOutput>;

  getStorageRoots(
    account: PromiseOrValue<string>,
    blockHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  processStorageRoot(
    account: PromiseOrValue<string>,
    blockHash: PromiseOrValue<BytesLike>,
    blockHeaderRLP: PromiseOrValue<BytesLike>,
    accountStateProofRLP: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processStorageSlot(
    account: PromiseOrValue<string>,
    blockHash: PromiseOrValue<BytesLike>,
    slot: PromiseOrValue<BytesLike>,
    storageProof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRegisteredSlot(
      blockHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStorage(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<StateProofVerifier.SlotValueStructOutput>;

    getStorageRoots(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    processStorageRoot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      blockHeaderRLP: PromiseOrValue<BytesLike>,
      accountStateProofRLP: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    processStorageSlot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StorageRootProcessed(address,address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      blockHash?: PromiseOrValue<BytesLike> | null
    ): StorageRootProcessedEventFilter;
    StorageRootProcessed(
      caller?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      blockHash?: PromiseOrValue<BytesLike> | null
    ): StorageRootProcessedEventFilter;

    "StorageSlotProcessed(address,address,bytes32,bytes32,uint256)"(
      caller?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      blockHash?: PromiseOrValue<BytesLike> | null,
      slot?: null,
      value?: null
    ): StorageSlotProcessedEventFilter;
    StorageSlotProcessed(
      caller?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      blockHash?: PromiseOrValue<BytesLike> | null,
      slot?: null,
      value?: null
    ): StorageSlotProcessedEventFilter;
  };

  estimateGas: {
    getRegisteredSlot(
      blockHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStorage(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStorageRoots(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processStorageRoot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      blockHeaderRLP: PromiseOrValue<BytesLike>,
      accountStateProofRLP: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processStorageSlot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRegisteredSlot(
      blockHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStorage(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStorageRoots(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processStorageRoot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      blockHeaderRLP: PromiseOrValue<BytesLike>,
      accountStateProofRLP: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processStorageSlot(
      account: PromiseOrValue<string>,
      blockHash: PromiseOrValue<BytesLike>,
      slot: PromiseOrValue<BytesLike>,
      storageProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
