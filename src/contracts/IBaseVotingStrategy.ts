/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBaseVotingStrategy {
  export type VotingAssetConfigStruct = {
    storageSlots: PromiseOrValue<BigNumberish>[];
  };

  export type VotingAssetConfigStructOutput = [BigNumber[]] & {
    storageSlots: BigNumber[];
  };
}

export interface IBaseVotingStrategyInterface extends utils.Interface {
  functions: {
    "AAVE()": FunctionFragment;
    "A_AAVE()": FunctionFragment;
    "A_AAVE_BASE_BALANCE_SLOT()": FunctionFragment;
    "A_AAVE_DELEGATED_STATE_SLOT()": FunctionFragment;
    "BASE_BALANCE_SLOT()": FunctionFragment;
    "STK_AAVE()": FunctionFragment;
    "getVotingAssetConfig(address)": FunctionFragment;
    "getVotingAssetList()": FunctionFragment;
    "isTokenSlotAccepted(address,uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AAVE"
      | "A_AAVE"
      | "A_AAVE_BASE_BALANCE_SLOT"
      | "A_AAVE_DELEGATED_STATE_SLOT"
      | "BASE_BALANCE_SLOT"
      | "STK_AAVE"
      | "getVotingAssetConfig"
      | "getVotingAssetList"
      | "isTokenSlotAccepted"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AAVE", values?: undefined): string;
  encodeFunctionData(functionFragment: "A_AAVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "A_AAVE_BASE_BALANCE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "A_AAVE_DELEGATED_STATE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_BALANCE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STK_AAVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVotingAssetConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingAssetList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenSlotAccepted",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "AAVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A_AAVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "A_AAVE_BASE_BALANCE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "A_AAVE_DELEGATED_STATE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_BALANCE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STK_AAVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingAssetConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingAssetList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenSlotAccepted",
    data: BytesLike
  ): Result;

  events: {
    "VotingAssetAdd(address,uint128[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VotingAssetAdd"): EventFragment;
}

export interface VotingAssetAddEventObject {
  asset: string;
  storageSlots: BigNumber[];
}
export type VotingAssetAddEvent = TypedEvent<
  [string, BigNumber[]],
  VotingAssetAddEventObject
>;

export type VotingAssetAddEventFilter = TypedEventFilter<VotingAssetAddEvent>;

export interface IBaseVotingStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBaseVotingStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AAVE(overrides?: CallOverrides): Promise<[string]>;

    A_AAVE(overrides?: CallOverrides): Promise<[string]>;

    A_AAVE_BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<[BigNumber]>;

    A_AAVE_DELEGATED_STATE_SLOT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<[BigNumber]>;

    STK_AAVE(overrides?: CallOverrides): Promise<[string]>;

    getVotingAssetConfig(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IBaseVotingStrategy.VotingAssetConfigStructOutput]>;

    getVotingAssetList(overrides?: CallOverrides): Promise<[string[]]>;

    isTokenSlotAccepted(
      token: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  AAVE(overrides?: CallOverrides): Promise<string>;

  A_AAVE(overrides?: CallOverrides): Promise<string>;

  A_AAVE_BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

  A_AAVE_DELEGATED_STATE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

  STK_AAVE(overrides?: CallOverrides): Promise<string>;

  getVotingAssetConfig(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IBaseVotingStrategy.VotingAssetConfigStructOutput>;

  getVotingAssetList(overrides?: CallOverrides): Promise<string[]>;

  isTokenSlotAccepted(
    token: PromiseOrValue<string>,
    slot: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AAVE(overrides?: CallOverrides): Promise<string>;

    A_AAVE(overrides?: CallOverrides): Promise<string>;

    A_AAVE_BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    A_AAVE_DELEGATED_STATE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    STK_AAVE(overrides?: CallOverrides): Promise<string>;

    getVotingAssetConfig(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IBaseVotingStrategy.VotingAssetConfigStructOutput>;

    getVotingAssetList(overrides?: CallOverrides): Promise<string[]>;

    isTokenSlotAccepted(
      token: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "VotingAssetAdd(address,uint128[])"(
      asset?: PromiseOrValue<string> | null,
      storageSlots?: null
    ): VotingAssetAddEventFilter;
    VotingAssetAdd(
      asset?: PromiseOrValue<string> | null,
      storageSlots?: null
    ): VotingAssetAddEventFilter;
  };

  estimateGas: {
    AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    A_AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    A_AAVE_BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    A_AAVE_DELEGATED_STATE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    STK_AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingAssetConfig(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingAssetList(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenSlotAccepted(
      token: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A_AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A_AAVE_BASE_BALANCE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    A_AAVE_DELEGATED_STATE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BASE_BALANCE_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STK_AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingAssetConfig(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingAssetList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenSlotAccepted(
      token: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
