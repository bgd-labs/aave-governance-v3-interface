/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPayloadsControllerCore {
  export type ExecutorConfigStruct = {
    executor: PromiseOrValue<string>;
    delay: PromiseOrValue<BigNumberish>;
  };

  export type ExecutorConfigStructOutput = [string, number] & {
    executor: string;
    delay: number;
  };

  export type ExecutionActionStruct = {
    target: PromiseOrValue<string>;
    withDelegateCall: PromiseOrValue<boolean>;
    accessLevel: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type ExecutionActionStructOutput = [
    string,
    boolean,
    number,
    BigNumber,
    string,
    string
  ] & {
    target: string;
    withDelegateCall: boolean;
    accessLevel: number;
    value: BigNumber;
    signature: string;
    callData: string;
  };

  export type PayloadStruct = {
    creator: PromiseOrValue<string>;
    maximumAccessLevelRequired: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    queuedAt: PromiseOrValue<BigNumberish>;
    executedAt: PromiseOrValue<BigNumberish>;
    cancelledAt: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    delay: PromiseOrValue<BigNumberish>;
    gracePeriod: PromiseOrValue<BigNumberish>;
    actions: IPayloadsControllerCore.ExecutionActionStruct[];
  };

  export type PayloadStructOutput = [
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    IPayloadsControllerCore.ExecutionActionStructOutput[]
  ] & {
    creator: string;
    maximumAccessLevelRequired: number;
    state: number;
    createdAt: number;
    queuedAt: number;
    executedAt: number;
    cancelledAt: number;
    expirationTime: number;
    delay: number;
    gracePeriod: number;
    actions: IPayloadsControllerCore.ExecutionActionStructOutput[];
  };
}

export declare namespace IPayloadsControllerDataHelper {
  export type ExecutorConfigStruct = {
    accessLevel: PromiseOrValue<BigNumberish>;
    config: IPayloadsControllerCore.ExecutorConfigStruct;
  };

  export type ExecutorConfigStructOutput = [
    number,
    IPayloadsControllerCore.ExecutorConfigStructOutput
  ] & {
    accessLevel: number;
    config: IPayloadsControllerCore.ExecutorConfigStructOutput;
  };

  export type PayloadStruct = {
    id: PromiseOrValue<BigNumberish>;
    data: IPayloadsControllerCore.PayloadStruct;
  };

  export type PayloadStructOutput = [
    BigNumber,
    IPayloadsControllerCore.PayloadStructOutput
  ] & { id: BigNumber; data: IPayloadsControllerCore.PayloadStructOutput };
}

export interface IPayloadsControllerDataHelperInterface
  extends utils.Interface {
  functions: {
    "getExecutorConfigs(address,uint8[])": FunctionFragment;
    "getPayloadsData(address,uint40[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getExecutorConfigs" | "getPayloadsData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getExecutorConfigs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayloadsData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExecutorConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayloadsData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPayloadsControllerDataHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPayloadsControllerDataHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExecutorConfigs(
      payloadsController: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IPayloadsControllerDataHelper.ExecutorConfigStructOutput[]]>;

    getPayloadsData(
      payloadsController: PromiseOrValue<string>,
      payloadsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IPayloadsControllerDataHelper.PayloadStructOutput[]]>;
  };

  getExecutorConfigs(
    payloadsController: PromiseOrValue<string>,
    accessLevels: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IPayloadsControllerDataHelper.ExecutorConfigStructOutput[]>;

  getPayloadsData(
    payloadsController: PromiseOrValue<string>,
    payloadsIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IPayloadsControllerDataHelper.PayloadStructOutput[]>;

  callStatic: {
    getExecutorConfigs(
      payloadsController: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IPayloadsControllerDataHelper.ExecutorConfigStructOutput[]>;

    getPayloadsData(
      payloadsController: PromiseOrValue<string>,
      payloadsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IPayloadsControllerDataHelper.PayloadStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getExecutorConfigs(
      payloadsController: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayloadsData(
      payloadsController: PromiseOrValue<string>,
      payloadsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExecutorConfigs(
      payloadsController: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayloadsData(
      payloadsController: PromiseOrValue<string>,
      payloadsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
