/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IGovernanceCore {
  export type VotingConfigStruct = {
    coolDownBeforeVotingStart: PromiseOrValue<BigNumberish>;
    votingDuration: PromiseOrValue<BigNumberish>;
    yesThreshold: PromiseOrValue<BigNumberish>;
    yesNoDifferential: PromiseOrValue<BigNumberish>;
    minPropositionPower: PromiseOrValue<BigNumberish>;
  };

  export type VotingConfigStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    coolDownBeforeVotingStart: number;
    votingDuration: number;
    yesThreshold: BigNumber;
    yesNoDifferential: BigNumber;
    minPropositionPower: BigNumber;
  };

  export type ProposalStruct = {
    state: PromiseOrValue<BigNumberish>;
    accessLevel: PromiseOrValue<BigNumberish>;
    creationTime: PromiseOrValue<BigNumberish>;
    votingDuration: PromiseOrValue<BigNumberish>;
    votingActivationTime: PromiseOrValue<BigNumberish>;
    queuingTime: PromiseOrValue<BigNumberish>;
    cancelTimestamp: PromiseOrValue<BigNumberish>;
    creator: PromiseOrValue<string>;
    votingPortal: PromiseOrValue<string>;
    snapshotBlockHash: PromiseOrValue<BytesLike>;
    ipfsHash: PromiseOrValue<BytesLike>;
    forVotes: PromiseOrValue<BigNumberish>;
    againstVotes: PromiseOrValue<BigNumberish>;
    cancellationFee: PromiseOrValue<BigNumberish>;
    payloads: PayloadsControllerUtils.PayloadStruct[];
  };

  export type ProposalStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    PayloadsControllerUtils.PayloadStructOutput[]
  ] & {
    state: number;
    accessLevel: number;
    creationTime: number;
    votingDuration: number;
    votingActivationTime: number;
    queuingTime: number;
    cancelTimestamp: number;
    creator: string;
    votingPortal: string;
    snapshotBlockHash: string;
    ipfsHash: string;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    cancellationFee: BigNumber;
    payloads: PayloadsControllerUtils.PayloadStructOutput[];
  };
}

export declare namespace IGovernanceDataHelper {
  export type VotingConfigStruct = {
    accessLevel: PromiseOrValue<BigNumberish>;
    config: IGovernanceCore.VotingConfigStruct;
  };

  export type VotingConfigStructOutput = [
    number,
    IGovernanceCore.VotingConfigStructOutput
  ] & { accessLevel: number; config: IGovernanceCore.VotingConfigStructOutput };

  export type ConstantsStruct = {
    votingConfigs: IGovernanceDataHelper.VotingConfigStruct[];
    precisionDivider: PromiseOrValue<BigNumberish>;
    cooldownPeriod: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    cancellationFee: PromiseOrValue<BigNumberish>;
  };

  export type ConstantsStructOutput = [
    IGovernanceDataHelper.VotingConfigStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingConfigs: IGovernanceDataHelper.VotingConfigStructOutput[];
    precisionDivider: BigNumber;
    cooldownPeriod: BigNumber;
    expirationTime: BigNumber;
    cancellationFee: BigNumber;
  };

  export type ProposalStruct = {
    id: PromiseOrValue<BigNumberish>;
    votingChainId: PromiseOrValue<BigNumberish>;
    proposalData: IGovernanceCore.ProposalStruct;
  };

  export type ProposalStructOutput = [
    BigNumber,
    BigNumber,
    IGovernanceCore.ProposalStructOutput
  ] & {
    id: BigNumber;
    votingChainId: BigNumber;
    proposalData: IGovernanceCore.ProposalStructOutput;
  };

  export type RepresentativesStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    representative: PromiseOrValue<string>;
  };

  export type RepresentativesStructOutput = [BigNumber, string] & {
    chainId: BigNumber;
    representative: string;
  };

  export type RepresentedStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    votersRepresented: PromiseOrValue<string>[];
  };

  export type RepresentedStructOutput = [BigNumber, string[]] & {
    chainId: BigNumber;
    votersRepresented: string[];
  };
}

export declare namespace PayloadsControllerUtils {
  export type PayloadStruct = {
    chain: PromiseOrValue<BigNumberish>;
    accessLevel: PromiseOrValue<BigNumberish>;
    payloadsController: PromiseOrValue<string>;
    payloadId: PromiseOrValue<BigNumberish>;
  };

  export type PayloadStructOutput = [BigNumber, number, string, number] & {
    chain: BigNumber;
    accessLevel: number;
    payloadsController: string;
    payloadId: number;
  };
}

export interface IGovernanceDataHelperInterface extends utils.Interface {
  functions: {
    "getConstants(address,uint8[])": FunctionFragment;
    "getProposalsData(address,uint256,uint256,uint256)": FunctionFragment;
    "getRepresentationData(address,address,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getConstants"
      | "getProposalsData"
      | "getRepresentationData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getConstants",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepresentationData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepresentationData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGovernanceDataHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovernanceDataHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConstants(
      govCore: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IGovernanceDataHelper.ConstantsStructOutput]>;

    getProposalsData(
      govCore: PromiseOrValue<string>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGovernanceDataHelper.ProposalStructOutput[]]>;

    getRepresentationData(
      govCore: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [
        IGovernanceDataHelper.RepresentativesStructOutput[],
        IGovernanceDataHelper.RepresentedStructOutput[]
      ]
    >;
  };

  getConstants(
    govCore: PromiseOrValue<string>,
    accessLevels: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IGovernanceDataHelper.ConstantsStructOutput>;

  getProposalsData(
    govCore: PromiseOrValue<string>,
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGovernanceDataHelper.ProposalStructOutput[]>;

  getRepresentationData(
    govCore: PromiseOrValue<string>,
    wallet: PromiseOrValue<string>,
    chainIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [
      IGovernanceDataHelper.RepresentativesStructOutput[],
      IGovernanceDataHelper.RepresentedStructOutput[]
    ]
  >;

  callStatic: {
    getConstants(
      govCore: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IGovernanceDataHelper.ConstantsStructOutput>;

    getProposalsData(
      govCore: PromiseOrValue<string>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGovernanceDataHelper.ProposalStructOutput[]>;

    getRepresentationData(
      govCore: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [
        IGovernanceDataHelper.RepresentativesStructOutput[],
        IGovernanceDataHelper.RepresentedStructOutput[]
      ]
    >;
  };

  filters: {};

  estimateGas: {
    getConstants(
      govCore: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalsData(
      govCore: PromiseOrValue<string>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepresentationData(
      govCore: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConstants(
      govCore: PromiseOrValue<string>,
      accessLevels: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalsData(
      govCore: PromiseOrValue<string>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepresentationData(
      govCore: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
