/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMetaDelegateHelper,
  IMetaDelegateHelperInterface,
} from "./IMetaDelegateHelper";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IGovernancePowerDelegationToken",
            name: "underlyingAsset",
            type: "address",
          },
          {
            internalType: "enum IMetaDelegateHelper.DelegationType",
            name: "delegationType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "delegator",
            type: "address",
          },
          {
            internalType: "address",
            name: "delegatee",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct IMetaDelegateHelper.MetaDelegateParams[]",
        name: "delegateParams",
        type: "tuple[]",
      },
    ],
    name: "batchMetaDelegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMetaDelegateHelper__factory {
  static readonly abi = _abi;
  static createInterface(): IMetaDelegateHelperInterface {
    return new utils.Interface(_abi) as IMetaDelegateHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMetaDelegateHelper {
    return new Contract(address, _abi, signerOrProvider) as IMetaDelegateHelper;
  }
}
