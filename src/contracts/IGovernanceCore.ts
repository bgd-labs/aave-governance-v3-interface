/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IVotingMachineWithProofs {
  export type VotingAssetWithSlotStruct = {
    underlyingAsset: PromiseOrValue<string>;
    slot: PromiseOrValue<BigNumberish>;
  };

  export type VotingAssetWithSlotStructOutput = [string, BigNumber] & {
    underlyingAsset: string;
    slot: BigNumber;
  };
}

export declare namespace PayloadsControllerUtils {
  export type PayloadStruct = {
    chain: PromiseOrValue<BigNumberish>;
    accessLevel: PromiseOrValue<BigNumberish>;
    payloadsController: PromiseOrValue<string>;
    payloadId: PromiseOrValue<BigNumberish>;
  };

  export type PayloadStructOutput = [BigNumber, number, string, number] & {
    chain: BigNumber;
    accessLevel: number;
    payloadsController: string;
    payloadId: number;
  };
}

export declare namespace IGovernanceCore {
  export type ProposalStruct = {
    state: PromiseOrValue<BigNumberish>;
    accessLevel: PromiseOrValue<BigNumberish>;
    creationTime: PromiseOrValue<BigNumberish>;
    votingDuration: PromiseOrValue<BigNumberish>;
    votingActivationTime: PromiseOrValue<BigNumberish>;
    queuingTime: PromiseOrValue<BigNumberish>;
    cancelTimestamp: PromiseOrValue<BigNumberish>;
    creator: PromiseOrValue<string>;
    votingPortal: PromiseOrValue<string>;
    snapshotBlockHash: PromiseOrValue<BytesLike>;
    ipfsHash: PromiseOrValue<BytesLike>;
    forVotes: PromiseOrValue<BigNumberish>;
    againstVotes: PromiseOrValue<BigNumberish>;
    cancellationFee: PromiseOrValue<BigNumberish>;
    payloads: PayloadsControllerUtils.PayloadStruct[];
  };

  export type ProposalStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    PayloadsControllerUtils.PayloadStructOutput[]
  ] & {
    state: number;
    accessLevel: number;
    creationTime: number;
    votingDuration: number;
    votingActivationTime: number;
    queuingTime: number;
    cancelTimestamp: number;
    creator: string;
    votingPortal: string;
    snapshotBlockHash: string;
    ipfsHash: string;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    cancellationFee: BigNumber;
    payloads: PayloadsControllerUtils.PayloadStructOutput[];
  };

  export type VotingConfigStruct = {
    coolDownBeforeVotingStart: PromiseOrValue<BigNumberish>;
    votingDuration: PromiseOrValue<BigNumberish>;
    yesThreshold: PromiseOrValue<BigNumberish>;
    yesNoDifferential: PromiseOrValue<BigNumberish>;
    minPropositionPower: PromiseOrValue<BigNumberish>;
  };

  export type VotingConfigStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    coolDownBeforeVotingStart: number;
    votingDuration: number;
    yesThreshold: BigNumber;
    yesNoDifferential: BigNumber;
    minPropositionPower: BigNumber;
  };

  export type SetVotingConfigInputStruct = {
    accessLevel: PromiseOrValue<BigNumberish>;
    coolDownBeforeVotingStart: PromiseOrValue<BigNumberish>;
    votingDuration: PromiseOrValue<BigNumberish>;
    yesThreshold: PromiseOrValue<BigNumberish>;
    yesNoDifferential: PromiseOrValue<BigNumberish>;
    minPropositionPower: PromiseOrValue<BigNumberish>;
  };

  export type SetVotingConfigInputStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    accessLevel: number;
    coolDownBeforeVotingStart: number;
    votingDuration: number;
    yesThreshold: BigNumber;
    yesNoDifferential: BigNumber;
    minPropositionPower: BigNumber;
  };

  export type RepresentativeInputStruct = {
    representative: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type RepresentativeInputStructOutput = [string, BigNumber] & {
    representative: string;
    chainId: BigNumber;
  };
}

export interface IGovernanceCoreInterface extends utils.Interface {
  functions: {
    "ACHIEVABLE_VOTING_PARTICIPATION()": FunctionFragment;
    "CANCELLATION_FEE_COLLECTOR()": FunctionFragment;
    "COOLDOWN_PERIOD()": FunctionFragment;
    "MIN_VOTING_DURATION()": FunctionFragment;
    "NAME()": FunctionFragment;
    "PRECISION_DIVIDER()": FunctionFragment;
    "PROPOSAL_EXPIRATION_TIME()": FunctionFragment;
    "VOTING_TOKENS_CAP()": FunctionFragment;
    "activateVoting(uint256)": FunctionFragment;
    "addVotingPortals(address[])": FunctionFragment;
    "cancelProposal(uint256)": FunctionFragment;
    "createProposal((uint256,uint8,address,uint40)[],address,bytes32)": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getCancellationFee()": FunctionFragment;
    "getPowerStrategy()": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getProposalState(uint256)": FunctionFragment;
    "getProposalsCount()": FunctionFragment;
    "getRepresentativeByChain(address,uint256)": FunctionFragment;
    "getRepresentedVotersByChain(address,uint256)": FunctionFragment;
    "getVotingConfig(uint8)": FunctionFragment;
    "getVotingPortalsCount()": FunctionFragment;
    "isVotingPortalApproved(address)": FunctionFragment;
    "queueProposal(uint256,uint128,uint128)": FunctionFragment;
    "redeemCancellationFee(uint256[])": FunctionFragment;
    "removeVotingPortals(address[])": FunctionFragment;
    "rescueVotingPortal(address)": FunctionFragment;
    "setPowerStrategy(address)": FunctionFragment;
    "setVotingConfigs((uint8,uint24,uint24,uint256,uint256,uint256)[])": FunctionFragment;
    "updateCancellationFee(uint256)": FunctionFragment;
    "updateRepresentativesForChain((address,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACHIEVABLE_VOTING_PARTICIPATION"
      | "CANCELLATION_FEE_COLLECTOR"
      | "COOLDOWN_PERIOD"
      | "MIN_VOTING_DURATION"
      | "NAME"
      | "PRECISION_DIVIDER"
      | "PROPOSAL_EXPIRATION_TIME"
      | "VOTING_TOKENS_CAP"
      | "activateVoting"
      | "addVotingPortals"
      | "cancelProposal"
      | "createProposal"
      | "executeProposal"
      | "getCancellationFee"
      | "getPowerStrategy"
      | "getProposal"
      | "getProposalState"
      | "getProposalsCount"
      | "getRepresentativeByChain"
      | "getRepresentedVotersByChain"
      | "getVotingConfig"
      | "getVotingPortalsCount"
      | "isVotingPortalApproved"
      | "queueProposal"
      | "redeemCancellationFee"
      | "removeVotingPortals"
      | "rescueVotingPortal"
      | "setPowerStrategy"
      | "setVotingConfigs"
      | "updateCancellationFee"
      | "updateRepresentativesForChain"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACHIEVABLE_VOTING_PARTICIPATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCELLATION_FEE_COLLECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRECISION_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_EXPIRATION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_TOKENS_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateVoting",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addVotingPortals",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [
      PayloadsControllerUtils.PayloadStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancellationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRepresentativeByChain",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepresentedVotersByChain",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPortalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingPortalApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCancellationFee",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVotingPortals",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueVotingPortal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPowerStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingConfigs",
    values: [IGovernanceCore.SetVotingConfigInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCancellationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRepresentativesForChain",
    values: [IGovernanceCore.RepresentativeInputStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACHIEVABLE_VOTING_PARTICIPATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCELLATION_FEE_COLLECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_EXPIRATION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_TOKENS_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVotingPortals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancellationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepresentativeByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepresentedVotersByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPortalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVotingPortalApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCancellationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVotingPortals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueVotingPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPowerStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCancellationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRepresentativesForChain",
    data: BytesLike
  ): Result;

  events: {
    "CancellationFeeRedeemed(uint256,address,uint256,bool)": EventFragment;
    "CancellationFeeUpdated(uint256)": EventFragment;
    "PayloadSent(uint256,uint40,address,uint256,uint256,uint256)": EventFragment;
    "PowerStrategyUpdated(address)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,uint8,bytes32)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalFailed(uint256,uint128,uint128)": EventFragment;
    "ProposalQueued(uint256,uint128,uint128)": EventFragment;
    "RepresentativeUpdated(address,address,uint256)": EventFragment;
    "VoteForwarded(uint256,address,bool,tuple[])": EventFragment;
    "VotingActivated(uint256,bytes32,uint24)": EventFragment;
    "VotingConfigUpdated(uint8,uint24,uint24,uint256,uint256,uint256)": EventFragment;
    "VotingPortalUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancellationFeeRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancellationFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerStrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepresentativeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteForwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPortalUpdated"): EventFragment;
}

export interface CancellationFeeRedeemedEventObject {
  proposalId: BigNumber;
  to: string;
  cancellationFee: BigNumber;
  success: boolean;
}
export type CancellationFeeRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  CancellationFeeRedeemedEventObject
>;

export type CancellationFeeRedeemedEventFilter =
  TypedEventFilter<CancellationFeeRedeemedEvent>;

export interface CancellationFeeUpdatedEventObject {
  cancellationFee: BigNumber;
}
export type CancellationFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  CancellationFeeUpdatedEventObject
>;

export type CancellationFeeUpdatedEventFilter =
  TypedEventFilter<CancellationFeeUpdatedEvent>;

export interface PayloadSentEventObject {
  proposalId: BigNumber;
  payloadId: number;
  payloadsController: string;
  chainId: BigNumber;
  payloadNumberOnProposal: BigNumber;
  numberOfPayloadsOnProposal: BigNumber;
}
export type PayloadSentEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, BigNumber, BigNumber],
  PayloadSentEventObject
>;

export type PayloadSentEventFilter = TypedEventFilter<PayloadSentEvent>;

export interface PowerStrategyUpdatedEventObject {
  newPowerStrategy: string;
}
export type PowerStrategyUpdatedEvent = TypedEvent<
  [string],
  PowerStrategyUpdatedEventObject
>;

export type PowerStrategyUpdatedEventFilter =
  TypedEventFilter<PowerStrategyUpdatedEvent>;

export interface ProposalCanceledEventObject {
  proposalId: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  creator: string;
  accessLevel: number;
  ipfsHash: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalFailedEventObject {
  proposalId: BigNumber;
  votesFor: BigNumber;
  votesAgainst: BigNumber;
}
export type ProposalFailedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ProposalFailedEventObject
>;

export type ProposalFailedEventFilter = TypedEventFilter<ProposalFailedEvent>;

export interface ProposalQueuedEventObject {
  proposalId: BigNumber;
  votesFor: BigNumber;
  votesAgainst: BigNumber;
}
export type ProposalQueuedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ProposalQueuedEventObject
>;

export type ProposalQueuedEventFilter = TypedEventFilter<ProposalQueuedEvent>;

export interface RepresentativeUpdatedEventObject {
  voter: string;
  representative: string;
  chainId: BigNumber;
}
export type RepresentativeUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  RepresentativeUpdatedEventObject
>;

export type RepresentativeUpdatedEventFilter =
  TypedEventFilter<RepresentativeUpdatedEvent>;

export interface VoteForwardedEventObject {
  proposalId: BigNumber;
  voter: string;
  support: boolean;
  votingAssetsWithSlot: IVotingMachineWithProofs.VotingAssetWithSlotStructOutput[];
}
export type VoteForwardedEvent = TypedEvent<
  [
    BigNumber,
    string,
    boolean,
    IVotingMachineWithProofs.VotingAssetWithSlotStructOutput[]
  ],
  VoteForwardedEventObject
>;

export type VoteForwardedEventFilter = TypedEventFilter<VoteForwardedEvent>;

export interface VotingActivatedEventObject {
  proposalId: BigNumber;
  snapshotBlockHash: string;
  votingDuration: number;
}
export type VotingActivatedEvent = TypedEvent<
  [BigNumber, string, number],
  VotingActivatedEventObject
>;

export type VotingActivatedEventFilter = TypedEventFilter<VotingActivatedEvent>;

export interface VotingConfigUpdatedEventObject {
  accessLevel: number;
  votingDuration: number;
  coolDownBeforeVotingStart: number;
  yesThreshold: BigNumber;
  yesNoDifferential: BigNumber;
  minPropositionPower: BigNumber;
}
export type VotingConfigUpdatedEvent = TypedEvent<
  [number, number, number, BigNumber, BigNumber, BigNumber],
  VotingConfigUpdatedEventObject
>;

export type VotingConfigUpdatedEventFilter =
  TypedEventFilter<VotingConfigUpdatedEvent>;

export interface VotingPortalUpdatedEventObject {
  votingPortal: string;
  approved: boolean;
}
export type VotingPortalUpdatedEvent = TypedEvent<
  [string, boolean],
  VotingPortalUpdatedEventObject
>;

export type VotingPortalUpdatedEventFilter =
  TypedEventFilter<VotingPortalUpdatedEvent>;

export interface IGovernanceCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovernanceCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<[string]>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateVoting(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCancellationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPowerStrategy(overrides?: CallOverrides): Promise<[string]>;

    getProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGovernanceCore.ProposalStructOutput]>;

    getProposalState(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProposalsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRepresentativeByChain(
      voter: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRepresentedVotersByChain(
      representative: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVotingConfig(
      accessLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGovernanceCore.VotingConfigStructOutput]>;

    getVotingPortalsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isVotingPortalApproved(
      votingPortal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queueProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      forVotes: PromiseOrValue<BigNumberish>,
      againstVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemCancellationFee(
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueVotingPortal(
      votingPortal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPowerStrategy(
      newPowerStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCancellationFee(
      cancellationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACHIEVABLE_VOTING_PARTICIPATION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<string>;

  COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  PRECISION_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  activateVoting(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVotingPortals(
    votingPortals: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelProposal(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProposal(
    payloads: PayloadsControllerUtils.PayloadStruct[],
    votingPortal: PromiseOrValue<string>,
    ipfsHash: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeProposal(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPowerStrategy(overrides?: CallOverrides): Promise<string>;

  getProposal(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGovernanceCore.ProposalStructOutput>;

  getProposalState(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getProposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRepresentativeByChain(
    voter: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRepresentedVotersByChain(
    representative: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVotingConfig(
    accessLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGovernanceCore.VotingConfigStructOutput>;

  getVotingPortalsCount(overrides?: CallOverrides): Promise<BigNumber>;

  isVotingPortalApproved(
    votingPortal: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queueProposal(
    proposalId: PromiseOrValue<BigNumberish>,
    forVotes: PromiseOrValue<BigNumberish>,
    againstVotes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemCancellationFee(
    proposalIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVotingPortals(
    votingPortals: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueVotingPortal(
    votingPortal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPowerStrategy(
    newPowerStrategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingConfigs(
    votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCancellationFee(
    cancellationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRepresentativesForChain(
    representatives: IGovernanceCore.RepresentativeInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<string>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    activateVoting(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerStrategy(overrides?: CallOverrides): Promise<string>;

    getProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGovernanceCore.ProposalStructOutput>;

    getProposalState(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getProposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRepresentativeByChain(
      voter: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRepresentedVotersByChain(
      representative: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVotingConfig(
      accessLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGovernanceCore.VotingConfigStructOutput>;

    getVotingPortalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    isVotingPortalApproved(
      votingPortal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      forVotes: PromiseOrValue<BigNumberish>,
      againstVotes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemCancellationFee(
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    rescueVotingPortal(
      votingPortal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPowerStrategy(
      newPowerStrategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCancellationFee(
      cancellationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancellationFeeRedeemed(uint256,address,uint256,bool)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      cancellationFee?: null,
      success?: PromiseOrValue<boolean> | null
    ): CancellationFeeRedeemedEventFilter;
    CancellationFeeRedeemed(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      cancellationFee?: null,
      success?: PromiseOrValue<boolean> | null
    ): CancellationFeeRedeemedEventFilter;

    "CancellationFeeUpdated(uint256)"(
      cancellationFee?: null
    ): CancellationFeeUpdatedEventFilter;
    CancellationFeeUpdated(
      cancellationFee?: null
    ): CancellationFeeUpdatedEventFilter;

    "PayloadSent(uint256,uint40,address,uint256,uint256,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      payloadId?: null,
      payloadsController?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      payloadNumberOnProposal?: null,
      numberOfPayloadsOnProposal?: null
    ): PayloadSentEventFilter;
    PayloadSent(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      payloadId?: null,
      payloadsController?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      payloadNumberOnProposal?: null,
      numberOfPayloadsOnProposal?: null
    ): PayloadSentEventFilter;

    "PowerStrategyUpdated(address)"(
      newPowerStrategy?: PromiseOrValue<string> | null
    ): PowerStrategyUpdatedEventFilter;
    PowerStrategyUpdated(
      newPowerStrategy?: PromiseOrValue<string> | null
    ): PowerStrategyUpdatedEventFilter;

    "ProposalCanceled(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;

    "ProposalCreated(uint256,address,uint8,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      accessLevel?: PromiseOrValue<BigNumberish> | null,
      ipfsHash?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      accessLevel?: PromiseOrValue<BigNumberish> | null,
      ipfsHash?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;

    "ProposalFailed(uint256,uint128,uint128)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      votesFor?: null,
      votesAgainst?: null
    ): ProposalFailedEventFilter;
    ProposalFailed(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      votesFor?: null,
      votesAgainst?: null
    ): ProposalFailedEventFilter;

    "ProposalQueued(uint256,uint128,uint128)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      votesFor?: null,
      votesAgainst?: null
    ): ProposalQueuedEventFilter;
    ProposalQueued(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      votesFor?: null,
      votesAgainst?: null
    ): ProposalQueuedEventFilter;

    "RepresentativeUpdated(address,address,uint256)"(
      voter?: PromiseOrValue<string> | null,
      representative?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null
    ): RepresentativeUpdatedEventFilter;
    RepresentativeUpdated(
      voter?: PromiseOrValue<string> | null,
      representative?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null
    ): RepresentativeUpdatedEventFilter;

    "VoteForwarded(uint256,address,bool,tuple[])"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      support?: PromiseOrValue<boolean> | null,
      votingAssetsWithSlot?: null
    ): VoteForwardedEventFilter;
    VoteForwarded(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      support?: PromiseOrValue<boolean> | null,
      votingAssetsWithSlot?: null
    ): VoteForwardedEventFilter;

    "VotingActivated(uint256,bytes32,uint24)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      snapshotBlockHash?: PromiseOrValue<BytesLike> | null,
      votingDuration?: null
    ): VotingActivatedEventFilter;
    VotingActivated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      snapshotBlockHash?: PromiseOrValue<BytesLike> | null,
      votingDuration?: null
    ): VotingActivatedEventFilter;

    "VotingConfigUpdated(uint8,uint24,uint24,uint256,uint256,uint256)"(
      accessLevel?: PromiseOrValue<BigNumberish> | null,
      votingDuration?: null,
      coolDownBeforeVotingStart?: null,
      yesThreshold?: null,
      yesNoDifferential?: null,
      minPropositionPower?: null
    ): VotingConfigUpdatedEventFilter;
    VotingConfigUpdated(
      accessLevel?: PromiseOrValue<BigNumberish> | null,
      votingDuration?: null,
      coolDownBeforeVotingStart?: null,
      yesThreshold?: null,
      yesNoDifferential?: null,
      minPropositionPower?: null
    ): VotingConfigUpdatedEventFilter;

    "VotingPortalUpdated(address,bool)"(
      votingPortal?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<boolean> | null
    ): VotingPortalUpdatedEventFilter;
    VotingPortalUpdated(
      votingPortal?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<boolean> | null
    ): VotingPortalUpdatedEventFilter;
  };

  estimateGas: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    activateVoting(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalState(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRepresentativeByChain(
      voter: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepresentedVotersByChain(
      representative: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingConfig(
      accessLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPortalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    isVotingPortalApproved(
      votingPortal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      forVotes: PromiseOrValue<BigNumberish>,
      againstVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemCancellationFee(
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueVotingPortal(
      votingPortal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPowerStrategy(
      newPowerStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCancellationFee(
      cancellationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCELLATION_FEE_COLLECTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_VOTING_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSAL_EXPIRATION_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateVoting(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: PromiseOrValue<string>,
      ipfsHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCancellationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalState(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRepresentativeByChain(
      voter: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepresentedVotersByChain(
      representative: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingConfig(
      accessLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPortalsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVotingPortalApproved(
      votingPortal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      forVotes: PromiseOrValue<BigNumberish>,
      againstVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemCancellationFee(
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVotingPortals(
      votingPortals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueVotingPortal(
      votingPortal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPowerStrategy(
      newPowerStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCancellationFee(
      cancellationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
