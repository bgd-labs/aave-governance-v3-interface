/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBaseAdapter {
  export type TrustedRemotesConfigStruct = {
    originForwarder: PromiseOrValue<string>;
    originChainId: PromiseOrValue<BigNumberish>;
  };

  export type TrustedRemotesConfigStructOutput = [string, BigNumber] & {
    originForwarder: string;
    originChainId: BigNumber;
  };
}

export interface LayerZeroAdapterInterface extends utils.Interface {
  functions: {
    "CROSS_CHAIN_CONTROLLER()": FunctionFragment;
    "LZ_ENDPOINT()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "forwardMessage(address,uint256,uint256,bytes)": FunctionFragment;
    "getTrustedRemoteByChainId(uint256)": FunctionFragment;
    "infraToNativeChainId(uint256)": FunctionFragment;
    "lzReceive(uint16,bytes,uint64,bytes)": FunctionFragment;
    "nativeToInfraChainId(uint256)": FunctionFragment;
    "setupPayments()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CROSS_CHAIN_CONTROLLER"
      | "LZ_ENDPOINT"
      | "VERSION"
      | "forwardMessage"
      | "getTrustedRemoteByChainId"
      | "infraToNativeChainId"
      | "lzReceive"
      | "nativeToInfraChainId"
      | "setupPayments"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CROSS_CHAIN_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LZ_ENDPOINT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forwardMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRemoteByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "infraToNativeChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeToInfraChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setupPayments",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CROSS_CHAIN_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LZ_ENDPOINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRemoteByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "infraToNativeChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeToInfraChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupPayments",
    data: BytesLike
  ): Result;

  events: {
    "SetTrustedRemote(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetTrustedRemote"): EventFragment;
}

export interface SetTrustedRemoteEventObject {
  originChainId: BigNumber;
  originForwarder: string;
}
export type SetTrustedRemoteEvent = TypedEvent<
  [BigNumber, string],
  SetTrustedRemoteEventObject
>;

export type SetTrustedRemoteEventFilter =
  TypedEventFilter<SetTrustedRemoteEvent>;

export interface LayerZeroAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LayerZeroAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CROSS_CHAIN_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    LZ_ENDPOINT(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    forwardMessage(
      receiver: PromiseOrValue<string>,
      destinationGasLimit: PromiseOrValue<BigNumberish>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTrustedRemoteByChainId(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    infraToNativeChainId(
      infraChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lzReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nativeToInfraChainId(
      nativeChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setupPayments(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CROSS_CHAIN_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  LZ_ENDPOINT(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  forwardMessage(
    receiver: PromiseOrValue<string>,
    destinationGasLimit: PromiseOrValue<BigNumberish>,
    destinationChainId: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTrustedRemoteByChainId(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  infraToNativeChainId(
    infraChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lzReceive(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nativeToInfraChainId(
    nativeChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setupPayments(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CROSS_CHAIN_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    LZ_ENDPOINT(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    forwardMessage(
      receiver: PromiseOrValue<string>,
      destinationGasLimit: PromiseOrValue<BigNumberish>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getTrustedRemoteByChainId(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    infraToNativeChainId(
      infraChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    nativeToInfraChainId(
      nativeChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setupPayments(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SetTrustedRemote(uint256,address)"(
      originChainId?: null,
      originForwarder?: null
    ): SetTrustedRemoteEventFilter;
    SetTrustedRemote(
      originChainId?: null,
      originForwarder?: null
    ): SetTrustedRemoteEventFilter;
  };

  estimateGas: {
    CROSS_CHAIN_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    LZ_ENDPOINT(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    forwardMessage(
      receiver: PromiseOrValue<string>,
      destinationGasLimit: PromiseOrValue<BigNumberish>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTrustedRemoteByChainId(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    infraToNativeChainId(
      infraChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nativeToInfraChainId(
      nativeChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setupPayments(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CROSS_CHAIN_CONTROLLER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LZ_ENDPOINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwardMessage(
      receiver: PromiseOrValue<string>,
      destinationGasLimit: PromiseOrValue<BigNumberish>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTrustedRemoteByChainId(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    infraToNativeChainId(
      infraChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lzReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nativeToInfraChainId(
      nativeChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setupPayments(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
