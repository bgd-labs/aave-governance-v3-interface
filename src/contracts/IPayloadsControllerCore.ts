/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPayloadsControllerCore {
  export type ExecutionActionStruct = {
    target: PromiseOrValue<string>;
    withDelegateCall: PromiseOrValue<boolean>;
    accessLevel: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type ExecutionActionStructOutput = [
    string,
    boolean,
    number,
    BigNumber,
    string,
    string
  ] & {
    target: string;
    withDelegateCall: boolean;
    accessLevel: number;
    value: BigNumber;
    signature: string;
    callData: string;
  };

  export type ExecutorConfigStruct = {
    executor: PromiseOrValue<string>;
    delay: PromiseOrValue<BigNumberish>;
  };

  export type ExecutorConfigStructOutput = [string, number] & {
    executor: string;
    delay: number;
  };

  export type PayloadStruct = {
    creator: PromiseOrValue<string>;
    maximumAccessLevelRequired: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    queuedAt: PromiseOrValue<BigNumberish>;
    executedAt: PromiseOrValue<BigNumberish>;
    cancelledAt: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    delay: PromiseOrValue<BigNumberish>;
    gracePeriod: PromiseOrValue<BigNumberish>;
    actions: IPayloadsControllerCore.ExecutionActionStruct[];
  };

  export type PayloadStructOutput = [
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    IPayloadsControllerCore.ExecutionActionStructOutput[]
  ] & {
    creator: string;
    maximumAccessLevelRequired: number;
    state: number;
    createdAt: number;
    queuedAt: number;
    executedAt: number;
    cancelledAt: number;
    expirationTime: number;
    delay: number;
    gracePeriod: number;
    actions: IPayloadsControllerCore.ExecutionActionStructOutput[];
  };

  export type UpdateExecutorInputStruct = {
    accessLevel: PromiseOrValue<BigNumberish>;
    executorConfig: IPayloadsControllerCore.ExecutorConfigStruct;
  };

  export type UpdateExecutorInputStructOutput = [
    number,
    IPayloadsControllerCore.ExecutorConfigStructOutput
  ] & {
    accessLevel: number;
    executorConfig: IPayloadsControllerCore.ExecutorConfigStructOutput;
  };
}

export interface IPayloadsControllerCoreInterface extends utils.Interface {
  functions: {
    "EXPIRATION_DELAY()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "MAX_EXECUTION_DELAY()": FunctionFragment;
    "MIN_EXECUTION_DELAY()": FunctionFragment;
    "cancelPayload(uint40)": FunctionFragment;
    "createPayload((address,bool,uint8,uint256,string,bytes)[])": FunctionFragment;
    "emergencyEtherTransfer(address,uint256)": FunctionFragment;
    "emergencyTokenTransfer(address,address,uint256)": FunctionFragment;
    "executePayload(uint40)": FunctionFragment;
    "getExecutorSettingsByAccessControl(uint8)": FunctionFragment;
    "getPayloadById(uint40)": FunctionFragment;
    "getPayloadState(uint40)": FunctionFragment;
    "getPayloadsCount()": FunctionFragment;
    "initialize(address,address,(uint8,(address,uint40))[])": FunctionFragment;
    "updateExecutors((uint8,(address,uint40))[])": FunctionFragment;
    "whoCanRescue()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXPIRATION_DELAY"
      | "GRACE_PERIOD"
      | "MAX_EXECUTION_DELAY"
      | "MIN_EXECUTION_DELAY"
      | "cancelPayload"
      | "createPayload"
      | "emergencyEtherTransfer"
      | "emergencyTokenTransfer"
      | "executePayload"
      | "getExecutorSettingsByAccessControl"
      | "getPayloadById"
      | "getPayloadState"
      | "getPayloadsCount"
      | "initialize"
      | "updateExecutors"
      | "whoCanRescue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXPIRATION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXECUTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_EXECUTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPayload",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPayload",
    values: [IPayloadsControllerCore.ExecutionActionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyEtherTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executePayload",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorSettingsByAccessControl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayloadById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayloadState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayloadsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IPayloadsControllerCore.UpdateExecutorInputStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutors",
    values: [IPayloadsControllerCore.UpdateExecutorInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whoCanRescue",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXPIRATION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXECUTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_EXECUTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyEtherTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorSettingsByAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayloadById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayloadState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayloadsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whoCanRescue",
    data: BytesLike
  ): Result;

  events: {
    "ERC20Rescued(address,address,address,uint256)": EventFragment;
    "ExecutorSet(uint8,address,uint40)": EventFragment;
    "NativeTokensRescued(address,address,uint256)": EventFragment;
    "PayloadCancelled(uint40)": EventFragment;
    "PayloadCreated(uint40,address,tuple[],uint8)": EventFragment;
    "PayloadExecuted(uint40)": EventFragment;
    "PayloadExecutionMessageReceived(address,uint256,bool,bytes,bytes)": EventFragment;
    "PayloadQueued(uint40)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Rescued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeTokensRescued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadExecuted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PayloadExecutionMessageReceived"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadQueued"): EventFragment;
}

export interface ERC20RescuedEventObject {
  caller: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type ERC20RescuedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ERC20RescuedEventObject
>;

export type ERC20RescuedEventFilter = TypedEventFilter<ERC20RescuedEvent>;

export interface ExecutorSetEventObject {
  accessLevel: number;
  executor: string;
  delay: number;
}
export type ExecutorSetEvent = TypedEvent<
  [number, string, number],
  ExecutorSetEventObject
>;

export type ExecutorSetEventFilter = TypedEventFilter<ExecutorSetEvent>;

export interface NativeTokensRescuedEventObject {
  caller: string;
  to: string;
  amount: BigNumber;
}
export type NativeTokensRescuedEvent = TypedEvent<
  [string, string, BigNumber],
  NativeTokensRescuedEventObject
>;

export type NativeTokensRescuedEventFilter =
  TypedEventFilter<NativeTokensRescuedEvent>;

export interface PayloadCancelledEventObject {
  payloadId: number;
}
export type PayloadCancelledEvent = TypedEvent<
  [number],
  PayloadCancelledEventObject
>;

export type PayloadCancelledEventFilter =
  TypedEventFilter<PayloadCancelledEvent>;

export interface PayloadCreatedEventObject {
  payloadId: number;
  creator: string;
  actions: IPayloadsControllerCore.ExecutionActionStructOutput[];
  maximumAccessLevelRequired: number;
}
export type PayloadCreatedEvent = TypedEvent<
  [
    number,
    string,
    IPayloadsControllerCore.ExecutionActionStructOutput[],
    number
  ],
  PayloadCreatedEventObject
>;

export type PayloadCreatedEventFilter = TypedEventFilter<PayloadCreatedEvent>;

export interface PayloadExecutedEventObject {
  payloadId: number;
}
export type PayloadExecutedEvent = TypedEvent<
  [number],
  PayloadExecutedEventObject
>;

export type PayloadExecutedEventFilter = TypedEventFilter<PayloadExecutedEvent>;

export interface PayloadExecutionMessageReceivedEventObject {
  originSender: string;
  originChainId: BigNumber;
  delivered: boolean;
  message: string;
  reason: string;
}
export type PayloadExecutionMessageReceivedEvent = TypedEvent<
  [string, BigNumber, boolean, string, string],
  PayloadExecutionMessageReceivedEventObject
>;

export type PayloadExecutionMessageReceivedEventFilter =
  TypedEventFilter<PayloadExecutionMessageReceivedEvent>;

export interface PayloadQueuedEventObject {
  payloadId: number;
}
export type PayloadQueuedEvent = TypedEvent<[number], PayloadQueuedEventObject>;

export type PayloadQueuedEventFilter = TypedEventFilter<PayloadQueuedEvent>;

export interface IPayloadsControllerCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPayloadsControllerCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXPIRATION_DELAY(overrides?: CallOverrides): Promise<[number]>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    MAX_EXECUTION_DELAY(overrides?: CallOverrides): Promise<[number]>;

    MIN_EXECUTION_DELAY(overrides?: CallOverrides): Promise<[number]>;

    cancelPayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPayload(
      actions: IPayloadsControllerCore.ExecutionActionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyEtherTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyTokenTransfer(
      erc20Token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executePayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExecutorSettingsByAccessControl(
      accessControl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPayloadsControllerCore.ExecutorConfigStructOutput]>;

    getPayloadById(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPayloadsControllerCore.PayloadStructOutput]>;

    getPayloadState(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPayloadsCount(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      owner: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExecutors(
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whoCanRescue(overrides?: CallOverrides): Promise<[string]>;
  };

  EXPIRATION_DELAY(overrides?: CallOverrides): Promise<number>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

  MAX_EXECUTION_DELAY(overrides?: CallOverrides): Promise<number>;

  MIN_EXECUTION_DELAY(overrides?: CallOverrides): Promise<number>;

  cancelPayload(
    payloadId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPayload(
    actions: IPayloadsControllerCore.ExecutionActionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyEtherTransfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyTokenTransfer(
    erc20Token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executePayload(
    payloadId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExecutorSettingsByAccessControl(
    accessControl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPayloadsControllerCore.ExecutorConfigStructOutput>;

  getPayloadById(
    payloadId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPayloadsControllerCore.PayloadStructOutput>;

  getPayloadState(
    payloadId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPayloadsCount(overrides?: CallOverrides): Promise<number>;

  initialize(
    owner: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExecutors(
    executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whoCanRescue(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EXPIRATION_DELAY(overrides?: CallOverrides): Promise<number>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

    MAX_EXECUTION_DELAY(overrides?: CallOverrides): Promise<number>;

    MIN_EXECUTION_DELAY(overrides?: CallOverrides): Promise<number>;

    cancelPayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPayload(
      actions: IPayloadsControllerCore.ExecutionActionStruct[],
      overrides?: CallOverrides
    ): Promise<number>;

    emergencyEtherTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyTokenTransfer(
      erc20Token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executePayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExecutorSettingsByAccessControl(
      accessControl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPayloadsControllerCore.ExecutorConfigStructOutput>;

    getPayloadById(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPayloadsControllerCore.PayloadStructOutput>;

    getPayloadState(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPayloadsCount(overrides?: CallOverrides): Promise<number>;

    initialize(
      owner: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateExecutors(
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    whoCanRescue(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ERC20Rescued(address,address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ERC20RescuedEventFilter;
    ERC20Rescued(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ERC20RescuedEventFilter;

    "ExecutorSet(uint8,address,uint40)"(
      accessLevel?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null,
      delay?: null
    ): ExecutorSetEventFilter;
    ExecutorSet(
      accessLevel?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null,
      delay?: null
    ): ExecutorSetEventFilter;

    "NativeTokensRescued(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): NativeTokensRescuedEventFilter;
    NativeTokensRescued(
      caller?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): NativeTokensRescuedEventFilter;

    "PayloadCancelled(uint40)"(payloadId?: null): PayloadCancelledEventFilter;
    PayloadCancelled(payloadId?: null): PayloadCancelledEventFilter;

    "PayloadCreated(uint40,address,tuple[],uint8)"(
      payloadId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      actions?: null,
      maximumAccessLevelRequired?: PromiseOrValue<BigNumberish> | null
    ): PayloadCreatedEventFilter;
    PayloadCreated(
      payloadId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      actions?: null,
      maximumAccessLevelRequired?: PromiseOrValue<BigNumberish> | null
    ): PayloadCreatedEventFilter;

    "PayloadExecuted(uint40)"(payloadId?: null): PayloadExecutedEventFilter;
    PayloadExecuted(payloadId?: null): PayloadExecutedEventFilter;

    "PayloadExecutionMessageReceived(address,uint256,bool,bytes,bytes)"(
      originSender?: PromiseOrValue<string> | null,
      originChainId?: PromiseOrValue<BigNumberish> | null,
      delivered?: PromiseOrValue<boolean> | null,
      message?: null,
      reason?: null
    ): PayloadExecutionMessageReceivedEventFilter;
    PayloadExecutionMessageReceived(
      originSender?: PromiseOrValue<string> | null,
      originChainId?: PromiseOrValue<BigNumberish> | null,
      delivered?: PromiseOrValue<boolean> | null,
      message?: null,
      reason?: null
    ): PayloadExecutionMessageReceivedEventFilter;

    "PayloadQueued(uint40)"(payloadId?: null): PayloadQueuedEventFilter;
    PayloadQueued(payloadId?: null): PayloadQueuedEventFilter;
  };

  estimateGas: {
    EXPIRATION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXECUTION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_EXECUTION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    cancelPayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPayload(
      actions: IPayloadsControllerCore.ExecutionActionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyEtherTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyTokenTransfer(
      erc20Token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executePayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExecutorSettingsByAccessControl(
      accessControl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayloadById(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayloadState(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayloadsCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExecutors(
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whoCanRescue(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EXPIRATION_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_EXECUTION_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_EXECUTION_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelPayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPayload(
      actions: IPayloadsControllerCore.ExecutionActionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyEtherTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyTokenTransfer(
      erc20Token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executePayload(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExecutorSettingsByAccessControl(
      accessControl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayloadById(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayloadState(
      payloadId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayloadsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExecutors(
      executors: IPayloadsControllerCore.UpdateExecutorInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whoCanRescue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
